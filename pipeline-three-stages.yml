---
groups:
- name: release
  jobs:
  - deploy-try-anything
  - deploy-staging
  - deploy-production
- name: updates
  jobs:
  - update-try-anything
  - update-staging
  - update-production
- name: packages
  jobs:
  - export-compiled-packages
  - import-compiled-packages-preprod
  - import-compiled-packages-production

jobs:
- name: import-compiled-packages-production
  public: true
  serial: true
  plan:
  - aggregate:
    - {get: pipeline, resource: git-pipeline, trigger: false}
    - {get: stemcell, passed: [deploy-try-anything], trigger: true}
    - {get: release-redis, passed: [deploy-try-anything], trigger: true}
    - {get: compiled-package-redis, passed: [export-compiled-packages], trigger: true}
  - task: bosh-export-compiled-packages
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: pipeline, path: .}
      - {name: stemcell, path: try-anything/stemcell/}
      - {name: release-redis, path: try-anything/releases/redis/}
      - {name: compiled-package-redis, path: try-anything/compiled_packages/}
      run:
        path: ./try-anything/bin/import_compiled_packages.sh
        args: []
      params:
        bosh_target: {{bosh-production-target}}
        bosh_username: {{bosh-production-username}}
        bosh_password: {{bosh-production-password}}
- name: import-compiled-packages-preprod
  public: true
  serial: true
  plan:
  - aggregate:
    - {get: pipeline, resource: git-pipeline, trigger: false}
    - {get: stemcell, passed: [deploy-try-anything], trigger: true}
    - {get: release-redis, passed: [deploy-try-anything], trigger: true}
    - {get: compiled-package-redis, passed: [export-compiled-packages], trigger: true}
  - task: bosh-export-compiled-packages
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: pipeline, path: .}
      - {name: stemcell, path: try-anything/stemcell/}
      - {name: release-redis, path: try-anything/releases/redis/}
      - {name: compiled-package-redis, path: try-anything/compiled_packages/}
      run:
        path: ./try-anything/bin/import_compiled_packages.sh
        args: []
      params:
        bosh_target: {{bosh-preprod-target}}
        bosh_username: {{bosh-preprod-username}}
        bosh_password: {{bosh-preprod-password}}
- name: export-compiled-packages
  public: true
  serial: true
  plan:
  - aggregate:
    - get: candidate-assets
      resource: s3-candidate-assets
      passed: [deploy-try-anything]
      trigger: false
    - {get: pipeline, resource: git-pipeline, trigger: false}
  - task: unpack-assets
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: pipeline, path: .}
      - {name: candidate-assets}
      run:
        path: ./staging/bin/unpack_assets.sh
        args: ["candidate-assets/pipeline-assets-*.tgz", "staging"]
  - task: bosh-export-compiled-packages
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
        - {name: unpack-assets, path: .}
      run:
        path: ./try-anything/bin/export_compiled_packages.sh
        args: []
      params:
        bosh_target: {{bosh-try-anything-target}}
        bosh_username: {{bosh-try-anything-username}}
        bosh_password: {{bosh-try-anything-password}}
  - put: compiled-package-redis
    params:
      from: try-anything/compiled_packages/redis-(.*)-bosh-warden-boshlite-ubuntu-trusty-go_agent-(.*).tgz
      to: bosh-warden-boshlite-ubuntu-trusty-go_agent/redis/

- name: deploy-try-anything
  public: true
  serial: true
  serial_groups: [try-anything]
  plan:
  - aggregate:
    - {get: stemcell, trigger: true}
    - {get: release-redis, trigger: true}
    - {get: pipeline, resource: git-pipeline, trigger: false}
    - {get: try-anything-template-changes, trigger: true}
    - {get: release-version, trigger: false, params: {bump: patch}}
  - task: make-manifest
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: pipeline, path: .}
      - {name: stemcell, path: try-anything/stemcell}
      - {name: release-redis, path: try-anything/releases/redis}
      run: {path: ./try-anything/bin/make_manifest_and_save.sh}
  - task: git-add
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: make-manifest}
      run:
        path: ./make-manifest/try-anything/bin/git-add-stage-changes.sh
        args: ["[try-anything] Update manifest & trigger pipeline"]
  - put: git-pipeline
    params:
      repository: git-add/make-manifest
      rebase: true

  - put: deployment-try-anything
    params:
      manifest: make-manifest/try-anything/manifests/manifest.yml
      releases: [release-redis/*.tgz]
      stemcells: [stemcell/*.tgz]
  - task: bosh-run-errand-acceptance-tests
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
        - {name: make-manifest}
      run:
        path: bosh
        args: [-t, {{bosh-target}}, -u, {{bosh-username}}, -p, {{bosh-password}}, -d, make-manifest/try-anything/manifests/manifest.yml, run, errand, acceptance-tests]

  - put: release-version
    params: {file: release-version/number}
  - task: save-deployment-pipeline
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: release-version}
      - {name: make-manifest, path: .}
      - {name: release-redis}
      - {name: stemcell}
      run: {path: ./try-anything/bin/save_deployment_pipeline.sh}

  - put: s3-candidate-assets
    params: {from: save-deployment-pipeline/pipeline-assets-(.*).tgz}

- name: update-try-anything
  public: true
  serial: true
  serial_groups: [try-anything]
  plan:
  - aggregate:
    - {get: pipeline, resource: git-pipeline, trigger: false}
    - {get: try-anything-env-changes, trigger: true}

  - task: make-manifest
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: pipeline, path: .}
      run: {path: ./try-anything/bin/make_manifest_and_save.sh}
  - task: git-add
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: make-manifest}
      run:
        path: ./make-manifest/try-anything/bin/git-add-stage-changes.sh
        args: ["[try-anything] Update local manifest only"]
  - put: git-pipeline
    params:
      repository: git-add/make-manifest
      rebase: true

  - put: deployment-try-anything
    params:
      manifest: make-manifest/try-anything/manifests/manifest.yml
      releases: []
      stemcells: []

- name: deploy-staging
  public: true
  serial: true
  serial_groups: [staging]
  plan:
  - aggregate:
    - get: candidate-assets
      resource: s3-candidate-assets
      passed: [deploy-try-anything]
      trigger: true
    - {get: pipeline, resource: git-pipeline, trigger: false}
    - {get: release-version, passed: [deploy-try-anything], trigger: false}
  - task: unpack-assets
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: pipeline, path: .}
      - {name: candidate-assets}
      run:
        path: ./staging/bin/unpack_assets.sh
        args: ["candidate-assets/pipeline-assets-*.tgz", "staging"]
  - task: make-manifest
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: unpack-assets, path: .}
      run: {path: ./staging/bin/make_manifest_and_save.sh}
  - task: git-add
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - name: make-manifest
      run:
        path: ./make-manifest/staging/bin/git-add-stage-changes.sh
        args: ["[staging] Update manifest"]
  - put: git-pipeline
    params:
      repository: git-add/make-manifest
      rebase: true

  - put: deployment-staging
    params:
      manifest: make-manifest/staging/manifests/manifest.yml
      releases: []
      stemcells: []

- name: update-staging
  public: true
  serial: true
  serial_groups: [staging]
  plan:
  - aggregate:
    - {get: pipeline, resource: git-pipeline, trigger: false}
    - {get: staging-env-changes, trigger: true}

  - task: make-manifest
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: pipeline, path: .}
      run: {path: ./staging/bin/make_manifest_and_save.sh}
  - task: git-add
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: make-manifest}
      run:
        path: ./make-manifest/staging/bin/git-add-stage-changes.sh
        args: ["[staging] Update local manifest only"]
  - put: git-pipeline
    params:
      repository: git-add/make-manifest
      rebase: true

  - put: deployment-staging
    params:
      manifest: make-manifest/staging/manifests/manifest.yml
      releases: []
      stemcells: []

- name: deploy-production
  public: true
  serial: true
  serial_groups: [production]
  plan:
  - aggregate:
    - get: candidate-assets
      resource: s3-candidate-assets
      passed: [deploy-staging]
      trigger: true
    - {get: production-env-changes, trigger: true}
    - {get: pipeline, resource: git-pipeline, trigger: false}
    - {get: release-version, passed: [deploy-staging], trigger: false}
  - task: unpack-assets
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: pipeline, path: .}
      - {name: candidate-assets}
      run:
        path: ./production/bin/unpack_assets.sh
        args: ["candidate-assets/pipeline-assets-*.tgz", "production"]
  - task: make-manifest
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: unpack-assets, path: .}
      run: {path: ./production/bin/make_manifest_and_save.sh}
  - task: git-add
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - name: make-manifest
      run:
        path: ./make-manifest/production/bin/git-add-stage-changes.sh
        args: ["[production] Update manifest"]
  - put: git-pipeline
    params:
      repository: git-add/make-manifest
      rebase: true

  - put: deployment-production
    params:
      manifest: make-manifest/production/manifests/manifest.yml
      releases: []
      stemcells: []

- name: update-production
  public: true
  serial: true
  serial_groups: [production]
  plan:
  - aggregate:
    - {get: pipeline, resource: git-pipeline, trigger: false}
    - {get: production-env-changes, trigger: true}

  - task: make-manifest
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: pipeline, path: .}
      run: {path: ./production/bin/make_manifest_and_save.sh}
  - task: git-add
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: make-manifest}
      run:
        path: ./make-manifest/production/bin/git-add-stage-changes.sh
        args: ["[production] Update local manifest only"]
  - put: git-pipeline
    params:
      repository: git-add/make-manifest
      rebase: true

  - put: deployment-production
    params:
      manifest: make-manifest/production/manifests/manifest.yml
      releases: []
      stemcells: []

resources:
- name: stemcell
  type: bosh-io-stemcell
  source:
    name: {{bosh-stemcell-name}}
    version: {{bosh-stemcell-version}}

- name: release-redis
  type: bosh-io-release
  source: {repository: cloudfoundry-community/redis-boshrelease}

- name: git-pipeline
  type: git
  source:
    uri: {{pipeline-git-repo}}
    branch: {{pipeline-branch}}
    private_key: {{github-private-key}}

- name: try-anything-env-changes
  type: git
  source:
    uri: {{pipeline-git-repo}}
    branch: {{pipeline-branch}}
    private_key: {{github-private-key}}
    paths: [try-anything/environment]

- name: try-anything-template-changes
  type: git
  source:
    uri: {{pipeline-git-repo}}
    branch: {{pipeline-branch}}
    private_key: {{github-private-key}}
    paths: [try-anything/templates]

# staging-env-changes should only trigger on environment-specific changes
- name: staging-env-changes
  type: git
  source:
    uri: {{pipeline-git-repo}}
    branch: {{pipeline-branch}}
    private_key: {{github-private-key}}
    paths: [staging/environment]

# production-env-changes should only trigger on environment-specific changes
- name: production-env-changes
  type: git
  source:
    uri: {{pipeline-git-repo}}
    branch: {{pipeline-branch}}
    private_key: {{github-private-key}}
    paths: [production/environment]

- name: deployment-try-anything
  type: bosh-deployment
  source:
    target: {{bosh-target}}
    username: {{bosh-username}}
    password: {{bosh-password}}
    deployment: try-anything
    ignore_ssl: true

- name: deployment-staging
  type: bosh-deployment
  source:
    target: {{bosh-target}}
    username: {{bosh-username}}
    password: {{bosh-password}}
    deployment: staging
    ignore_ssl: true

- name: deployment-production
  type: bosh-deployment
  source:
    target: {{bosh-target}}
    username: {{bosh-username}}
    password: {{bosh-password}}
    deployment: production
    ignore_ssl: true

- name: release-version
  type: semver
  source:
    bucket: {{aws-pipeline-bucket}}
    key: release-version
    initial_version: 0.1.0
    access_key_id: {{aws-access-key-id}}
    secret_access_key: {{aws-secret-access-key}}
    region_name: us-east-1

- name: s3-candidate-assets
  type: s3
  source:
    access_key_id: {{aws-access-key-id}}
    secret_access_key: {{aws-secret-access-key}}
    region_name: {{aws-region-name}}
    bucket:  {{aws-pipeline-bucket}}
    private: true
    regexp: pipeline-assets-(.*).tgz
